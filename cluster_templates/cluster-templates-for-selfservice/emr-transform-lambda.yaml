# ######################################################################################################################
# Sample Cloudformation Transform and Lambda Function
# Version: 1.0
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Deploys an AWS Lambda function and initializes cloudformation macro to resolve the emr target capacity.
#
# ##############################################################################################################
Parameters:
  EnvName:
    Type: String
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaRole
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaARN-${EnvName}
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Path: /
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: macro-lambda-${EnvName}
      Description: Macro Lambda Function in Python 3.9.
      Runtime: python3.9
      Code:
        ZipFile:
          "def lambda_handler(event, context):\n
          \n
            fragment = event['fragment']\n
            event_type = event['params']['FleetType']\n
            user_concurrency = int(event['params']['InputSize'])\n
          \n
            print(fragment)\n
          \n
            if event_type == 'task':\n
            \t if fragment['Properties']['TargetOnDemandCapacity'] == 'custom::Target':\n
            \t\t fragment['Properties']['TargetOnDemandCapacity'] = user_concurrency\n
            \t elif fragment['Properties']['TargetSpotCapacity'] == 'custom::Target':\n
            \t\t fragment['Properties']['TargetSpotCapacity'] = user_concurrency\n
            \n
            print(fragment)\n
            \n
            return {\n
              'requestId': event['requestId'],\n
              'status': 'success',\n
              'statusCode': 200,\n
              'fragment': fragment\n
            }"
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          ENV:
            Fn::Sub: ${EnvName}
  EmrCapacityMacro:
    Type: AWS::CloudFormation::Macro
    DependsOn: LambdaFunction
    Properties:
      Description: Lambda function to size emr node count based on team size
      FunctionName:
        Fn::GetAtt:
          - LambdaFunction
          - Arn
      Name: emr-size-macro-dev
